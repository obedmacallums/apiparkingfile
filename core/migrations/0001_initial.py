# Generated by Django 3.2.7 on 2022-08-02 23:18

import core.custom
import core.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_google_maps.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('^[0-9A-Z\\s-]*$', 'Only uppercase letters, numbers and spaces allowed')])),
                ('uid', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator('^[0-9A-Z\\s-]*$', 'Only uppercase letters, numbers and spaces allowed')])),
                ('linked_email_account', models.EmailField(max_length=254)),
                ('address', django_google_maps.fields.AddressField(max_length=200, null=True)),
                ('geolocation', django_google_maps.fields.GeoLocationField(max_length=100, null=True)),
                ('ssh_reverse_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('ssh_reverse_port', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ssh_key_file_name', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('^[\\w\\-. ]+$', 'Invalid file name')])),
                ('config_added_info', models.JSONField(blank=True, null=True)),
                ('config_ui', models.JSONField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('^[0-9A-Z\\s-]*$', 'Only uppercase letters, numbers and spaces allowed')])),
                ('camera_id', models.PositiveIntegerField()),
                ('local_link', core.models.LocalURLField(blank=True, max_length=150, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('agent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.agent')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('^[0-9A-Z\\s-]*$', 'Only uppercase letters, numbers and spaces allowed')])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.agent')),
            ],
            options={
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(max_length=15, unique=True, validators=[django.core.validators.RegexValidator('^[a-z]*$', 'Only lowercase letters are allowed')])),
                ('description', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator('^[0-9A-Z\\s-]*$', 'Only uppercase letters, numbers and spaces allowed')])),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='MetaData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_data', models.JSONField(validators=[core.custom.JSONSchemaValidator(limit_value={'type': 'object'})])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'meta data',
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plate', models.CharField(max_length=8, validators=[django.core.validators.RegexValidator('^[0-9A-Z]*$', 'Only uppercase letters and numbers are allowed, no spaces or special characters.')])),
                ('confidence', models.FloatField(blank=True, null=True)),
                ('travel_direction', models.FloatField(blank=True, null=True)),
                ('vehicle', models.JSONField(blank=True, null=True)),
                ('is_parked', models.BooleanField(default=False)),
                ('is_preview', models.BooleanField(default=False)),
                ('vehicle_detected', models.BooleanField(default=False)),
                ('best_uuid', models.CharField(blank=True, max_length=100, null=True)),
                ('link_image', models.URLField(blank=True, null=True)),
                ('image', models.TextField(blank=True, null=True)),
                ('crop_image', models.TextField(blank=True, null=True)),
                ('driver_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('^[0-9A-Z\\s-]*$', 'Only uppercase letters, numbers and spaces allowed')])),
                ('driver_id', models.CharField(blank=True, max_length=20, null=True)),
                ('custom_fields', models.JSONField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('agent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.agent')),
                ('camara', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.camera')),
                ('category', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.category')),
                ('meta_data', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.metadata')),
            ],
        ),
        migrations.AddField(
            model_name='agent',
            name='domain',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.domain'),
        ),
        migrations.CreateModel(
            name='AddedInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plate', models.CharField(max_length=8, validators=[django.core.validators.RegexValidator('^[0-9A-Z]*$', 'Only uppercase letters and numbers are allowed, no spaces or special characters.')])),
                ('driver_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('^[0-9A-Z\\s-]*$', 'Only uppercase letters, numbers and spaces allowed')])),
                ('driver_id', models.CharField(blank=True, max_length=20, null=True)),
                ('custom_fields', models.JSONField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.category')),
            ],
            options={
                'verbose_name_plural': 'added info',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.UniqueConstraint(fields=('name', 'agent'), name='unique_name_agent'),
        ),
    ]
